.. Time-stamp: <2014-01-08 23:21:14 ycopin>
.. _exercices:

Exercices
#########

.. _tables:

Tables de multiplication
========================

Écrire un programme affichant les tables de multiplication::

  1 x 1 = 1
  1 x 2 = 2
  ...
  9 x 9 = 81


Manipulation de listes
======================

.. _crible:

Crible d'Ératosthène
--------------------

Implémenter le `crible d'Ératosthène
<http://fr.wikipedia.org/wiki/Crible_d%27%C3%89ratosth%C3%A8ne>`_ pour
afficher les nombres premiers compris entre 1 et un entier fixe, p.ex.::

  Liste des entiers premiers <= 41
  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41]

.. _carre:

Carré magique
-------------

Un carré magique d’ordre *n* est un tableau carré *n × n* dans lequel
on écrit une et une seule fois les nombres entiers de 1 à *n²*, de
sorte que la somme des *n* nombres de chaque ligne, colonne ou
diagonale principale soit constante. P.ex. le carré magique d’ordre 5,
où toutes les sommes sont égales à 65:

==  ==  ==  ==  ==
11  18  25   2   9
10  12  19  21   3
 4   6  13  20  22
23   5   7  14  16
17  24   1   8  15
==  ==  ==  ==  ==

Pour les carrés magiques d’ordre impair, on dispose de l’algorithme
suivant -- *(i,j)* désignant la case de la ligne *i*, colonne *j* du
carré; on se place en outre dans une indexation « naturelle »
commençant à 1:

1. la case *(n,(n+1)/2)* contient 1 ;
2. si la case *(i,j)* contient la valeur *k*, alors on place la valeur
   *k+1* dans la case *(i+1,j+1)* si cette case est vide, ou dans la
   case *(i-1,j)* sinon. On respecte la règle selon laquelle un indice
   supérieur à *n* est ramené a 1.

Programmer cet algorithme pour pouvoir construire un carré magique
d’ordre impair quelconque.

.. _koch:

Flocon de Koch
==============

.. index::
   module: turtle

En utilisant les commandes `left`, `right` et `forward` de la
bibliothèque graphique standard `turtle` dans une fonction récursive,
générer à l'écran un `flocon de Koch
<http://fr.wikipedia.org/wiki/Flocon_de_Koch>`_ d'ordre arbitraire.

.. figure:: koch_3.*
   :align: center

   **Figure:** Flocon de Koch d'ordre 3.

.. _life:

Jeu de la vie
=============

On se propose de programmer l'automate cellulaire le plus célèbre, `le
Jeu de la vie <http://fr.wikipedia.org/wiki/Jeu_de_la_vie>`_.

Pour cela, vous créerez une classe `Life` qui contiendra la grille du
jeu ainsi que les méthodes qui permettront son évolution.  Vous
initialiserez la grille aléatoirement à l'aide de la fonction
`random.choice([True,False])`, et vous afficherez l'évolution de
l'automate dans la sortie standard du terminal, p.ex.::

  ...#..#.....##.......
  .....###.............
  #........#...........
  .....#...#...........
  ................##...
  .....#.#......##..#..
  ..............##.##..
  ..............##.##..
  ................#....

N.B.: Pour que l'affichage soit agréable à l'oeil, vous marquerez des
pauses entre l'affichage de chaque itération grâce à la fonction
`time.sleep`.

Manipulation de tableaux (arrays)
=================================

.. _mad:

*Median Absolute Deviation*
---------------------------

En statistique, le *Median Absolute Deviation* (MAD) est un estimateur
robuste de la dispersion d'un échantillon 1D: `MAD = median(| x -
median(x) |)`

À l'aide des fonctions `N.median` et `N.abs`, écrire une fonction
`mad(x, axis=None)` calculant le MAD d'un tableau le long d'un de ses
axes.

.. _pull:

Distribution du *pull*
----------------------

Le *pull* est une quantité statistique permettant d'évaluer la
conformité des erreurs par rapport à une distribution de valeurs
(typiquement les résidus d'un ajustement).  Pour un échantillon
:math:`\mathbf{x} = [x_i]` et les erreurs associées
:math:`\mathrm{d}\mathbf{x} = [\sigma_i]`, le *pull* est défini par:

* Moyenne optimale (pondérée par la variance): :math:`E = (\sum_{i}
  x_i/\sigma_i^2)/(\sum_i 1/\sigma_i^2)`
* Erreur sur la moyenne pondérée: :math:`\sigma_E^2 =
  1/\sum(1/\sigma_i^2)`
* Définition du *pull*: :math:`p_i = (x_i - E_i)/(\sigma_{E_i}^2 +
  \sigma_i^2)^{1/2}`, où :math:`E_i` et :math:`\sigma_{E_i}` sont
  calculées *sans* le point *i*.

Si les erreurs :math:`\sigma_i` sont correctes, la distribution du
*pull* est centrée sur 0 avec une déviation standard de 1.

Écrire une fonction `pull(x, dx)` calculant le *pull* de tableaux 1D.

.. _anscombe:

Quartet d'Anscombe
------------------

Après chargement des données, calculer et afficher les propriétés
statistiques des quatres jeux de données du :download:`Quartet
d'Anscombe <anscombe.dat>`:

* Moyenne et variance des *x* (`N.mean` et `N.var`)
* Moyenne et variance des *y*
* Corrélation entre les *x* et les *y* (`scipy.stats.pearsonr`)
* Équation de la droite de régression linéaire
  (`scipy.stats.linregress`)

.. table:: Quartet d'Anscombe

   =====  =====  =====  =====  =====  =====  =====  =====
   I             II            III           IV
   ------------  ------------  ------------  ------------
       x      y      x      y      x      y      x      y
   =====  =====  =====  =====  =====  =====  =====  =====
    10.0   8.04   10.0   9.14   10.0   7.46    8.0   6.58
     8.0   6.95    8.0   8.14    8.0   6.77    8.0   5.76
    13.0   7.58   13.0   8.74   13.0  12.74    8.0   7.71
     9.0   8.81    9.0   8.77    9.0   7.11    8.0   8.84
    11.0   8.33   11.0   9.26   11.0   7.81    8.0   8.47
    14.0   9.96   14.0   8.10   14.0   8.84    8.0   7.04
     6.0   7.24    6.0   6.13    6.0   6.08    8.0   5.25
     4.0   4.26    4.0   3.10    4.0   5.39   19.0  12.50
    12.0  10.84   12.0   9.13   12.0   8.15    8.0   5.56
     7.0   4.82    7.0   7.26    7.0   6.42    8.0   7.91
     5.0   5.68    5.0   4.74    5.0   5.73    8.0   6.89
   =====  =====  =====  =====  =====  =====  =====  =====

Pour chacun des jeux de données, tracer *y* en fonction de *x*, ainsi
que la droite de régression linéaire.

.. _logistique:

Diagramme de bifurcation : la suite logistique
----------------------------------------------

Écrivez une fonction qui calcule la valeur d'équilibre de la `suite
logistique <http://fr.wikipedia.org/wiki/Suite_logistique>`_ pour un
:math:`x_0` (nécessairement compris entre 0 et 1) et un paramètre
:math:`r` (parfois noté :math:`\mu`) donné.

Générez l'ensemble de ces points d'équilibre pour des valeurs de
:math:`r` comprises entre 0 et 4:

.. figure:: logistique.*
   :align: center
   :width: 50%

   **Figure:** Diagramme de bifurcation.

N.B.: Vous utiliserez la bibliothèque `matplotlib` pour tracer vos
résultats.

.. _julia:

Ensemble de Julia
-----------------

Représentez l'`ensemble de Julia
<http://fr.wikipedia.org/wiki/Ensemble_de_Julia>`_ pour la constante
complexe :math:`c = 0.284 + 0.0122j`:

.. figure:: julia.*
   :align: center
   :width: 50%

   **Figure:** Ensemble de Julia pour :math:`c = 0.284 + 0.0122j`.

N.B.: On utilisera la fonction `numpy.meshgrid` pour construire le
plan complexe, et l'on affichera le résultat grâce à la fonction
`matplotlib.pyplot.imshow`.

Voir également: `Superposition d'ensembles de Julia
<http://maths.wikidot.com/julia-superposition>`_

.. _algo:

Algorithmes numériques
======================

.. _romberg:

Intégration numérique de Romberg
--------------------------------

Écrire une fonction `integ_romberg(f, a, b, epsilon=1e-6)` permettant
de calculer l'intégrale numérique de la fonction *f* entre les bornes
*a* et *b* avec une précision *epsilon* selon la `méthode de Romberg
<http://fr.wikipedia.org/wiki/M%C3%A9thode_de_Romberg>`_.

Tester sur des solutions analytiques et en comparant à
`scipy.integrate.romberg`.

.. _rk:

Méthode de Runge-Kutta
----------------------

Développer un algorithme permettant d'intégrer numériquement une
équation différentielle du 1er ordre en utilisant la `méthode de
Runge-Kutta
<http://fr.wikipedia.org/wiki/M%C3%A9thodes_de_Runge-Kutta>`_ d'ordre
quatre.

Tester sur des solutions analytiques et en comparant à
`scipy.integrate.odeint`.

Exercices supplémentaires
=========================

* `Exercices de base
  <http://fr.wikibooks.org/wiki/Programmation_Python/Exercices_Base_du_langage>`_ |fr|
* `Entraînez-vous !
  <http://www.siteduzero.com/forum-83-537209-p1-entrainez-vous-sur-le-langage-python.html>`_ |fr|
* `Learn Python The Hard Way <http://learnpythonthehardway.org/book/>`_
* `Google Code Jam <http://code.google.com/codejam/>`_
* `CheckIO <http://www.checkio.org/>`_

.. |fr| image:: ../Cours/france_flag_icon.png
   :alt: Fr
.. |en| image:: ../Cours/uk_flag_icon.png
   :alt: En

.. Local Variables: ...
.. mode: rst ...
.. ispell-local-dictionary: "francais" ...
.. End: ...
