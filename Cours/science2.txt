.. _science2:

Bibliothèques scientifiques avancées
####################################

.. contents:: Table des matières
..
    1  Pandas
      1.1  Structures
      1.2  Accès aux données
      1.3  Indéxation hiérarchique
      1.4  Manipulation des données
      1.5  Histogramme et discrétisation
      1.6  Regroupement & aggrégation de données
      1.7  Visualisations
      1.8  xarray
    2  Astropy
      2.1  Tour d'horizon
      2.2  Démonstration
    3  Autres librairies scientifiques

Pandas
======

.. index:: module: pandas

:mod:`pandas` (`PANel DAta`) est une bibliothèque pour la
structuration et analyse avancée de données *hétérogènes*.  Elle
fournit notamment:

* des structures de données « labellisées », avec une indexation
  simple ou hiérarchique (càd à plusieurs niveaux),
* des méthodes d'alignement et d'agrégation des données, avec gestion
  des données manquantes,
* un support performant des labels temporels (p.ex. dates, de par son
  origine dans l'économétrie), et des statistiques « glissantes »,
* de nombreuses fonctions d'entrée/sortie, d'analyse statistiques et
  de visualisation.

Les fonctionnalités de :mod:`pandas` sont *très* riches et couvrent de
nombreux aspects (données manquantes, dates, analyse statistiques,
etc.), et il n'est pas question de toutes les aborder ici.  Avant de
vous lancer dans une manipulation qui vous semble complexe, bien
inspecter la `documentation
<http://pandas.pydata.org/pandas-docs/stable/>`_, très complète mais
touffue.

.. Attention:: Pandas est encore en phase de développement assez
   intense (nous travaillons ici sur la version `0.20.x
   <http://pandas.pydata.org/pandas-docs/version/0.20/whatsnew.html>`_).

.. Note:: La convention d'import utilisé dans les exemples est
   « `import pandas as PD` ».

.. rubric:: Liens

* `Modern Pandas <http://tomaugspurger.github.io/modern-1.html>`_


Structures
----------

.. index::
   pair: pandas; Series
   pair: pandas; DataFrame

**Références:** `Introduction to Data Structures
<http://pandas.pydata.org/pandas-docs/stable/dsintro.html>`_

Pandas dispose de 2 grandes structures de données:

==========================  ====  ===========
Nom de la structure         Rang  Description
==========================  ====  ===========
:class:`pandas.Series`        1   Vecteur de données *homogènes* labellisées
:class:`pandas.DataFrame`     2   Tableau structuré de colonnes *homogènes*
==========================  ====  ===========

>>> PD.Series(range(3))  # Série d'entiers sans indexation
0    0
1    1
2    2
dtype: int64
>>> PD.Series(N.random.randn(3), index=list('abc'))  # Série de réels indexés
a   -0.553480
b    0.081297
c   -1.845835
dtype: float64
>>> PD.DataFrame(N.random.randn(3, 4))
          0         1         2         3
0  1.570977 -0.677845  0.094364 -0.362031
1 -0.136712  0.762300  0.068611  1.265816
2 -0.697760  0.791288  0.449645 -1.105062
>>> PD.DataFrame(N.random.randn(3, 4), index=list('abc'), columns=list('ABCD'))
          A         B         C         D
a  0.098533  0.842090 -2.491275  0.795383
b  0.190612  0.082428  0.465439 -0.003476
c -1.546712  0.205308 -0.600612  0.078055

.. Note:: Les structures :class:`pandas.Panel` (de rang 3),
   :class:`pandas.Panel4D` (de rang 4) et :class:`pandas.PanelND` (de
   rang arbitraire) sont considérées comme **dépréciées** et seront
   retirées dans une version ultérieure.  Utiliser une indexation
   hiérarchique ou :mod:`xarray`.

Pour mettre en évidence la puissance de Pandas, nous utilisons le
catalogue :abbr:`CSV (Comma Separated Values)` des objets de Messier
:download:`Messier.csv`:

.. literalinclude:: Messier.csv
   :linenos:
   :lines: 1-8

Le fichier peut être importé à l'aide de la function
:func:`pandas.read_csv`, et le dataframe résultant est labellisé *à la
volée* par la colonne `M` (:meth:`pandas.DataFrame.set_index`) :

>>> messier = PD.read_csv("Messier.csv", comment='#')  # Lecture du fichier CSV
>>> messier.set_index('M', inplace=True)  # Indexation sur la colonne "M"
>>> messier.info()                        # Informations générales
<class 'pandas.core.frame.DataFrame'>
Index: 110 entries, M1 to M110
Data columns (total 10 columns):
NGC         108 non-null object
Type        110 non-null object
Mag         110 non-null float64
Size        110 non-null float64
Distance    110 non-null float64
RA          110 non-null float64
Dec         110 non-null float64
Con         110 non-null object
Season      110 non-null object
Name        31 non-null object
dtypes: float64(5), object(5)
memory usage: 9.5+ KB
>>> messier.head(3)  # Par défaut les 5 premières lignes
     NGC Type  Mag  Size  Distance      RA     Dec  Con  Season         Name
M
M1  1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  winter  Crab Nebula
M2  7089   Gc  6.5  12.9   11600.0  21.558   0.817  Aqr  autumn          NaN
M3  5272   Gc  6.2  16.2   10400.0  13.703  28.383  CVn  spring          NaN

.. index:: pair: pandas; Index

Un dataframe est caractérisé par son indexation (de type
:class:`pandas.Index`), ses colonnes, et les valeurs des données:

>>> messier.index    # Retourne un Index
Index([u'M1', u'M2', u'M3', ..., u'M108', u'M109', u'M110'],
      dtype='object', name=u'M', length=110)
>>> messier.columns  # Retourne un Index
Index([u'NGC', u'Type', u'Mag', ..., u'Con', u'Season', u'Name'],
      dtype='object')
>>> messier.dtypes   # Retourne une Series indexée sur le nom des colonnes
NGC          object
Type         object
Mag         float64
Size        float64
Distance    float64
RA          float64
Dec         float64
Con          object
Season       object
Name         object
dtype: object
>>> messier.values
array([['1952', 'Sn', 8.4, ..., 'Tau', 'winter', 'Crab Nebula'],
       ['7089', 'Gc', 6.5, ..., 'Aqr', 'autumn', nan],
       ...,
       ['3992', 'Ba', 9.8, ..., 'UMa', 'spring', nan],
       ['205', 'El', 8.5, ..., 'And', 'autumn', nan]], dtype=object)

Une description statistique sommaire des colonnes numériques est
obtenue par :meth:`pandas.DataFrame.describe`:

>>> messier.drop(['RA', 'Dec'], axis=1).describe()
              Mag        Size      Distance
count  110.000000  110.000000  1.100000e+02
mean     7.492727   17.719091  4.574883e+06
std      1.755657   22.055100  7.141036e+06
min      1.600000    0.800000  1.170000e+02
25%      6.300000    6.425000  1.312500e+03
50%      7.650000    9.900000  8.390000e+03
75%      8.900000   17.300000  1.070000e+07
max     10.200000  120.000000  1.840000e+07

Accès aux données
-----------------

.. index::
   pair: pandas; loc
   pair: pandas; iloc
   pair: pandas; at
   pair: pandas; iat

**Référence:** `Indexing and Selecting Data
<http://pandas.pydata.org/pandas-docs/stable/indexing.html>`_

L'accès par colonne retourne une :class:`pandas.Series` (avec la même
indexation) pour une colonne unique, ou un nouveau
:class:`pandas.DataFrame` pour plusieurs colonnes:

>>> messier.NGC  # Équivalent à messier['NGC']
M
M1      1952
M2      7089
        ...
M109    3992
M110     205
Name: NGC, Length: 110, dtype: object
>>> messier[['RA', 'Dec']]
          RA     Dec
M
M1     5.575  22.017
M2    21.558   0.817
...      ...     ...
M109  11.960  53.383
M110   0.673  41.683
[110 rows x 2 columns]

L'accès par :class:`slice` retourne un nouveau :class:`pandas.DataFrame`:

>>> messier[:6:2]
     NGC Type  Mag  Size  Distance      RA     Dec  Con  Season         Name
M
M1  1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  winter  Crab Nebula
M3  5272   Gc  6.2  16.2   10400.0  13.703  28.383  CVn  spring          NaN
M5  5904   Gc  5.6  17.4    7520.0  15.310   2.083  Ser  summer          NaN

L'accès peut également se faire via le(s) label(s) de l'indexation par
:attr:`pandas.DataFrame.loc`:

>>> messier.loc['M31']  # Retourne une Series indexée par les noms de colonne
NGC                    224
Type                    Sp
                ...
Season              autumn
Name      Andromeda Galaxy
Name: M31, Length: 10, dtype: object
>>> messier.loc['M31', ['Type', 'Name']]           # Retourne une Series
Type                  Sp
Name    Andromeda Galaxy
Name: M31, dtype: object
>>> messier.loc[['M31', 'M51'], ['Type', 'Name']]  # Retourne un DataFrame
    Type              Name
M
M31   Sp  Andromeda Galaxy
M51   Sp  Whirlpool Galaxy
>>> messier.loc['M31':'M33', ['Type', 'Name']]     # De M31 à M33 *inclu*
    Type               Name
M
M31   Sp   Andromeda Galaxy
M32   El                NaN
M33   Sp  Triangulum Galaxy

De façon symétrique, l'accès peut se faire via les n° de ligne/colonne
par :attr:`pandas.DataFrame.iloc`, p.ex.:

>>> messier.iloc[30:33, [1, -1]]  # Ici, l'indice 33 n'est *pas* inclu!
    Type               Name
M
M31   Sp   Andromeda Galaxy
M32   El                NaN
M33   Sp  Triangulum Galaxy
>>> messier.iloc[30:33, messier.columns.get_loc('Name')]  # Mix des 2 approches
M
M31     Andromeda Galaxy
M32                  NaN
M33    Triangulum Galaxy
Name: Name, dtype: object

Les fonctions :attr:`pandas.DataFrame.at` et
:attr:`pandas.DataFrame.iat` permettent d'accéder *rapidement* aux
données individuelles:

>>> messier.at['M31', 'NGC']  # 20× plus rapide que messier.loc['M31']['NGC']
'224'
>>> messier.iat[30, 0]        # 20× plus rapide que messier.iloc[0][0]
'224'

Enfin, comme pour :mod:`numpy`, il est possible d'opérer une sélection
booléenne:

>>> messier.loc[messier['Con'] == 'UMa', ['NGC', 'Name']]
       NGC             Name
M
M40   Win4       Winnecke 4
M81   3031    Bode's Galaxy
M82   3034     Cigar Galaxy
M97   3587       Owl Nebula
M101  5457  Pinwheel Galaxy
M108  3556              NaN
M109  3992              NaN
>>> messier[messier['Season'].isin('winter spring'.split())].head(3)
      NGC Type  Mag  Size  Distance      RA     Dec  Con  Season         Name
M
M1   1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  winter  Crab Nebula
M3   5272   Gc  6.2  16.2   10400.0  13.703  28.383  CVn  spring          NaN
M35  2168   Oc  5.3  28.0     859.0   6.148  24.333  Gem  winter          NaN
>>> messier.query("(Mag < 5) & (Size > 60)")[['Season', 'Name']]  # Syntaxe à la Numpy
     Season                    Name
M
M7   summer       Ptolemy's Cluster
M24  summer  Sagittarius Star Cloud
M31  autumn        Andromeda Galaxy
M42  winter   Great Nebula in Orion
M44  winter         Beehive Cluster
M45  winter                Pleiades

========================  =====================  =========
Sélection                 Syntaxe                Résultat
========================  =====================  =========
Colonne unique            `df.col` or `df[col]`  :class:`pandas.Series`
Liste de colonnes         `df[[c1, ...]]`        :class:`pandas.DataFrame`
Lignes par tranche        `df[slice]`            :class:`pandas.DataFrame`
Label unique              `df.loc[label]`        :class:`pandas.Series`
Liste de labels           `df.loc[[lab1, ...]]`  :class:`pandas.DataFrame`
Labels par tranche        `df.loc[lab1:lab2]`    :class:`pandas.DataFrame`
Ligne entière par n°      `df.iloc[i]`           :class:`pandas.Series`
Ligne partielle par n°    `df.iloc[i, [j,...]]`  :class:`pandas.Series`
Valeur par labels         `df.at[lab, col]`      Scalaire
Valeur par n°             `df.iat[i, j]`         Scalaire
Ligne par sél. booléenne  `df.loc[sel]` or       :class:`pandas.DataFrame`
                          `df[sel]` or
                          `df.query("sel")`
========================  =====================  =========

.. index::
   pair: pandas; drop
   pair: pandas; dropna
   pair: pandas; fillna

Pour éliminer une ou plusieurs colonnes:

>>> messier.drop(['RA', 'Dec'], axis=1).head(3)  # Élimination de colonnes
     NGC Type  Mag  Size  Distance  Con  Season  Name
M
M1  1952   Sn  8.4   5.0    1930.0  Tau  winter  Crab Nebula
M2  7089   Gc  6.5  12.9   11600.0  Aqr  autumn          NaN
M3  5272   Gc  6.2  16.2   10400.0  CVn  spring          NaN

Gestion des données manquantes:

>>> messier.dropna(axis=0, how='any', subset=['NGC', 'Name']).head(3)
     NGC Type  Mag  Size  Distance      RA     Dec  Con  Season               Name
M
M1  1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  winter        Crab Nebula
M6  6405   Oc  4.2  25.0     491.0  17.668 -32.217  Sco  summer  Butterfly Cluster
M7  6475   Oc  3.3  80.0     245.0  17.898 -34.817  Sco  summer  Ptolemy's Cluster
>>> messier.fillna('', inplace=True)  # Remplace les NaN à la volée
>>> messier.head(3)
     NGC Type  Mag  Size  Distance      RA     Dec  Con  Season         Name
M
M1  1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  winter  Crab Nebula
M2  7089   Gc  6.5  12.9   11600.0  21.558   0.817  Aqr  autumn
M3  5272   Gc  6.2  16.2   10400.0  13.703  28.383  CVn  spring

**Référence:** `Working with missing data
<http://pandas.pydata.org/pandas-docs/stable/missing_data.html>`_

.. Attention:: par défaut, la plupart des opérations retourne une
   *copie* de la structure, sauf si l'opération se fait « sur place »
   (`inplace=True`).

Indéxation hiérarchique
-----------------------

**Références:** `Multi-index / Advanced Indexing
<http://pandas.pydata.org/pandas-docs/stable/advanced.html>`_

.. index::
   pair: pandas; reset_index
   pair: pandas; set_index

:mod:`pandas` offre une indexation *hiérarchique*, permettant de
stocker et manipuler des données avec un nombre arbitraire de
dimensions dans des structures plus simples.

>>> saisons = messier.reset_index()  # Élimine l'indexation en place
>>> saisons.set_index(['Season', 'Con'], inplace=True)  # Multi-index
>>> saisons.head(3)
            NGC Type  Mag  Size  Distance      RA     Dec  Con         Name
M  Season
M1 winter  1952   Sn  8.4   5.0    1930.0   5.575  22.017  Tau  Crab Nebula
M2 autumn  7089   Gc  6.5  12.9   11600.0  21.558   0.817  Aqr
M3 spring  5272   Gc  6.2  16.2   10400.0  13.703  28.383  CVn

Les informations contenues sont toujours les mêmes, mais structurées
différemment:

>>> saisons.loc['spring'].head(3)  # Utilisation du 1er label
       M   NGC Type  Mag  Size    Distance      RA     Dec              Name
Con
CVn   M3  5272   Gc  6.2  16.2     10400.0  13.703  28.383
UMa  M40  Win4   Ds  8.4   0.8       156.0  12.373  58.083        Winnecke 4
Vir  M49  4472   El  8.4   8.2  18400000.0  12.497   8.000
>>> saisons.loc['spring', 'Leo'].head(3)  # Utilisation des 2 labels
               M   NGC Type  Mag  Size    Distance      RA     Dec Name
Season Con
spring Leo   M65  3623   Sp  9.3   4.7  10700000.0  11.315  13.083
       Leo   M66  3627   Sp  8.9   5.2  10700000.0  11.337  12.983
       Leo   M95  3351   Ba  9.7   3.8  11700000.0  10.733  11.700

Manipulation des données
------------------------

**Références:**  `<http://pandas.pydata.org/pandas-docs/stable/computation.html>`_

Comme dans :mod:`numpy`, mais encore plus facilement, il est possible de
modifier les valeurs, ajouter/retirer des colonnes ou des lignes, tout en
gérant les données manquantes.

>>> N.random.seed(0)
>>> df = PD.DataFrame(
        {'one': PD.Series(N.random.randn(3), index=['a', 'b', 'c']),
         'two': PD.Series(N.random.randn(4), index=['a', 'b', 'c', 'd']),
         'three': PD.Series(N.random.randn(3), index=['b', 'c', 'd'])})
>>> df
        one     three       two
a  1.764052       NaN  2.240893
b  0.400157 -0.151357  1.867558
c  0.978738 -0.103219 -0.977278
d       NaN  0.410599  0.950088
>>> df['four'] = df['one'] + df['two']; df  # Création d'une nouvelle colonne
        one     three       two      four
a  1.764052       NaN  2.240893  4.004946
b  0.400157 -0.151357  1.867558  2.267715
c  0.978738 -0.103219 -0.977278  0.001460
d       NaN  0.410599  0.950088       NaN
>>> df.sub(df.loc['b'], axis='columns') # Soustraction d'une ligne à toutes les colonnes (axis=1)
        one     three       two      four
a  1.363895       NaN  0.373335  1.737230
b  0.000000  0.000000  0.000000  0.000000
c  0.578581  0.048138 -2.844836 -2.266255
d       NaN  0.561956 -0.917470       NaN
>>> df.sub(df['one'], axis='index') # Soustraction d'une colonne à toutes les lignes (axis=0 ou 'rows')
   one     three       two      four
a  0.0       NaN  0.476841  2.240893
b  0.0 -0.551514  1.467401  1.867558
c  0.0 -1.081957 -1.956016 -0.977278
d  NaN       NaN       NaN       NaN

.. index::
   pair: pandas; sort_values
   pair: pandas; idxmin

>>> df.sort_values(by='a', axis=1) # Tri des colonnes selon les valeurs de la ligne 'a'
        one       two     three
a  1.764052  2.240893       NaN
b  0.400157  1.867558 -0.151357
c  0.978738 -0.977278 -0.103219
d       NaN  0.950088  0.410599
>>> df.min(axis=1) # Valeur minimale le long des colonnes
a    1.764052
b   -0.151357
c   -0.977278
d    0.410599
dtype: float64
>>> df.idxmin(axis=1) # Colonne des valeurs minimale le long des colonnes
a      one
b    three
c      two
d    three
dtype: object

>>> df.mean(axis=0)  # Moyenne sur toutes les lignes (gestion des données manquantes)
one      1.047649
three    0.052007
two      1.020315
dtype: float64

.. Hint:: Certains calculs numériques peuvent être significativement accélérés
   par l'utilisation de deux bibliothèques externes:

   * `Bottleneck <https://github.com/kwgoodman/bottleneck>`_
   * `NumExpr <https://github.com/pydata/numexpr>`_

   Si ces bibliothèques sont installées, :mod:`pandas` en bénéficiera
   de façon transparente.

Histogramme et discrétisation
-----------------------------

.. index::
   pair: pandas; value_counts
   pair: pandas; cut
   pair: pandas; qcut
   pair: pandas; sort_index

Compter les objets Messier par constellation avec
:func:`pandas.value_counts`:

>>> PD.value_counts(messier['Con']).head(3)
Sgr    15
Vir    11
Com     8
Name: Con, dtype: int64

Partitionner les objets en 3 groupes de magnitude (par valeurs:
:func:`pandas.cut`, par quantiles: :func:`pandas.qcut`), et les
compter:

>>> PD.value_counts(PD.cut(messier['Mag'], 3)).sort_index() # Par valeurs
(1.591, 4.467]     6
(4.467, 7.333]    40
(7.333, 10.2]     64
Name: Mag, dtype: int64
>>> PD.value_counts(PD.qcut(messier['Mag'], [0, .3, .6, 1])).sort_index()  # Par quantiles
(1.599, 6.697]    36
(6.697, 8.4]      38
(8.4, 10.2]       36
Name: Mag, dtype: int64

Regroupement & aggrégation de données
-------------------------------------

.. index::
   pair: pandas; groupby
   pair: pandas; agg

**Référence:** `Group By: split-apply-combine
<http://pandas.pydata.org/pandas-docs/stable/groupby.html>`_

Pandas offre la possibilité de regrouper les données selon divers
critères, d'aggréger les données au sein de chacun des groupes, et de
recombiner les résultats sur les groupes dans une structure unique.

>>> seasonGr = messier.groupby('Season')  # Retourne un DataFrameGroupBy
>>> seasonGr.groups
{'autumn': Index([u'M2', u'M15', ..., u'M103', u'M110'],
       dtype='object', name=u'M'),
 'spring': Index([u'M3', u'M40', ..., u'M108', u'M109'],
       dtype='object', name=u'M'),
 'summer': Index([u'M4', u'M5', ..., u'M102', u'M107'],
       dtype='object', name=u'M'),
 'winter': Index([u'M1', u'M35', ..., u'M79', u'M93'],
       dtype='object', name=u'M')}
>>> seasonGr.size()
Season
autumn    14
spring    38
summer    40
winter    18
dtype: int64
>>> seasonGr.get_group('winter').head(3)
     Con     Dec  Distance  Mag   NGC         Name     RA  Size Type
M
M1   Tau  22.017    1930.0  8.4  1952  Crab Nebula  5.575   5.0   Sn
M35  Gem  24.333     859.0  5.3  2168               6.148  28.0   Oc
M36  Aur  34.133    1260.0  6.3  1960               5.602  12.0   Oc
>>> seasonGr['Size'].agg([N.mean, N.std])  # Taille moyenne et stddev par groupe
             mean        std
Season
autumn  24.307143  31.472588
spring   7.197368   4.183848
summer  17.965000  19.322400
winter  34.261111  29.894779
>>> seasonGr.agg({'Size': N.max, 'Mag': N.min})
        Mag   Size
Season
autumn  3.4  120.0
spring  6.2   22.0
summer  3.3   90.0
winter  1.6  110.0

>>> magGr = messier.groupby([PD.qcut(messier['Mag'], [0, .3, .6, 1]), "Season"])
>>> magGr['Mag', 'Size'].agg({'Mag': ['count', 'mean'], 'Size': ['mean', 'std']})
                      Mag                 Size
                    count      mean       mean        std
Mag          Season
(1.599, 6.5] autumn     6  5.316667  45.200000  40.470878
             spring     1  6.200000  16.200000        NaN
             summer    15  5.673333  30.840000  26.225228
             winter    13  5.138462  42.923077  30.944740
(6.5, 8.24]  autumn     4  7.500000   9.250000   3.304038
             spring     7  7.714286  12.085714   5.587316
             summer    18  7.366667  11.183333   4.825453
             winter     2  7.550000  14.850000   8.697413
(8.24, 10.2] autumn     4  9.225000   8.025000   4.768910
             spring    30  9.236667   5.756667   2.272578
             summer     7  8.971429   7.814286   9.135540
             winter     3  8.566667   9.666667   6.429101


Visualisations
--------------

.. index:: module: seaborn

:ref:`Démonstration Pandas/Seaborn <Cours/pokemon.ipynb>` (notebook:
:download:`pokemon.ipynb`) sur le jeu de données :download:`Pokemon.csv`.

.. rubric: Références:

* `Visualization
  <http://pandas.pydata.org/pandas-docs/stable/visualization.html>`_
* `Seaborn: statistical data visualization
  <http://seaborn.pydata.org/>`_

.. rubric:: Autres exemples de visualisation de jeux de données complexes
            (utilisation de pandas et seaborn)

* `Iris Dataset <https://www.kaggle.com/benhamner/python-data-visualizations>`_
* `Histoire des sujets télévisés
  <https://github.com/AlexisEidelman/journaux_televises/blob/gh-pages/JT_notebook.ipynb>`_ |fr|

xarray
------

.. index:: module: xarray

`xarray <http://xarray.pydata.org/>`_ est une bibliothèque pour la
structuration de données *homogènes* de dimension arbitraire.


Astropy
=======

.. index:: module: astropy

`Astropy <http://astropy.readthedocs.io/en/stable/>`_ est une
librairie astronomique maintenue par la communauté et visant à fédérer
les efforts jusque là disparates.  Elle offre en outre une interface
unifiée à des `librairies affiliées
<http://www.astropy.org/affiliated/>`_ plus spécifiques.

Tour d'horizon
--------------

- Structures de base:

  - :mod:`astropy.constants`: constantes fondamentales (voir également
    :mod:`scipy.constants`)
  - :mod:`astropy.units`: unités et quantités dimensionnées
  - :mod:`astropy.nddata`: extension des :class:`numpy.ndarray` (incluant
    méta-données, masque, unité, incertitude, etc.)
  - :mod:`astropy.table`: tableaux hétérogènes
  - :mod:`astropy.time`: manipulation du temps et des dates
  - :mod:`astropy.coordinates`: systèmes de coordonnées
  - :mod:`astropy.wcs`: *World Coordinate System*
  - :mod:`astropy.modeling`: modèles et ajustements
  - :mod:`astropy.analytic_functions`: fonctions analytiques

- Entrées/sorties:

  - :mod:`astropy.io.fits`: fichiers FITS
  - :mod:`astropy.io.ascii`: tables ASCII
  - :mod:`astropy.io.votable`: XML VO-tables
  - :mod:`astropy.io.misc`: divers
  - :mod:`astropy.vo`: accès au *Virtual Observatory*

- Calculs astronomiques:

  - :mod:`astropy.cosmology`: calculs cosmologiques
  - :mod:`astropy.convolution`: convolution and filtrage
  - :mod:`astropy.visualization`: visualisation de données
  - :mod:`astropy.stats`: méthodes astro-statistiques

Démonstration
-------------

:ref:`Démonstration Astropy <Cours/astropy.ipynb>` (:download:`astropy.ipynb`)

.. rubric:: Voir également:

* `AstroBetter tutorials
  <http://www.astrobetter.com/blog/2014/07/07/astropy-tutorials-learn-how-to-do-common-astro-tasks-with-astropy-and-python/>`_

.. Note:: n'oubliez pas de citer [Astropy13]_ ou de `mentionner l'utilisation
   <http://www.astropy.org/about.html#acknowledge>`_ d'astropy dans vos
   publications et présentations.

.. [Astropy13] `2013A&A...558A..33A
               <http://adsabs.harvard.edu/abs/2013A%26A...558A..33A>`_


Autres librairies scientifiques
===============================

Python est maintenant très largement utilisé par la communauté
scientifique, et dispose d'innombrables librairies dédiées aux
différents domaines de la physique, chimie, etc.:

- Astronomie: `Kapteyn <http://www.astro.rug.nl/software/kapteyn/>`_,
  `AstroML <http://www.astroml.org/>`_, `HyperSpy
  <http://hyperspy.org/>`_
- Mécanique quantique: `QuTiP <http://qutip.org/>`_
- Électromagnétisme: `EMpy <https://lbolla.github.io/EMpy/>`_
- *PDE solver*: `FiPy <http://www.ctcms.nist.gov/fipy/>`_, `SfePy
  <http://sfepy.org/doc-devel/>`_
- Analyse statistique bayesienne: `PyStan
  <http://mc-stan.org/interfaces/pystan.html>`_
- *Markov Chain Monte-Carlo*: `emcee
  <http://dan.iel.fm/emcee/current/>`_, `PyMC3
  <https://pymc-devs.github.io/pymc3/>`_,
- *Machine Learning*: `mlpy <http://mlpy.sourceforge.net/>`_, `milk
  <https://pythonhosted.org/milk/>`_, `MDP
  <http://mdp-toolkit.sourceforge.net/>`_, et autres `modules d'intelligence
  artificielle
  <https://wiki.python.org/moin/PythonForArtificialIntelligence>`_
- Calcul symbolique: `sympy <http://www.sympy.org/>`_ (voir également
  ce `tutoriel sympy
  <https://mattpap.github.io/scipy-2011-tutorial/html/>`_)
- `PyROOT <https://root.cern.ch/pyroot>`_
- `High Performance Computing in Python
  <https://byumcl.bitbucket.io/bootcamp2013/labs/perfomance.html>`_
- `Etc. <http://www.scipy.org/topical-software.html>`_

.. |fr| image:: ../_static/france_flag_icon.png
   :alt: Fr
.. |en| image:: ../_static/uk_flag_icon.png
   :alt: En
