.. _standard:
.. _td4:

Bibliothèque standard
#####################

.. Time-stamp: <2015-05-17 23:44 ycopin@lyonovae03.in2p3.fr>

.. contents:: Table des matières
..
    1  Gestion des arguments/options de la ligne de commande
    2  [c]Pickle: sérialisation des données
    3  *Batteries included*
    4  *Text/Graphical User Interfaces*

Python dispose d'une très riche bibliothèque de modules étendant les
capacités du langage dans de nombreux domaines: nouveaux types de
données, interactions avec le système, gestion des fichiers et des
processus, protocoles de communication (internet, mail, FTP, etc.),
multimédia, etc.

* `The Python Standard Library <https://docs.python.org/2/library/>`_
  (v2.7)
* `Python by Example! <http://www.lightbird.net/py-by-example/>`_
* `Python Module of the Week <http://pymotw.com/2/contents.html>`_

.. _optparse:

Gestion des arguments/options de la ligne de commande
=====================================================

.. rubric:: Utilisation de `sys.argv`

.. index::
   module: sys

Le module :mod:`sys` permet un accès direct aux arguments de la ligne
de commande, via la liste :obj:`sys.argv`: `sys.argv[0]` contient le
nom du script executé, `sys.argv[1]` le nom du 1er argument (s'il
existe), etc.  P.ex.:

.. literalinclude:: ../Exercices/crible.py
   :start-after: start-sys
   :end-before: end-sys
   :linenos:

.. rubric:: Module `argparse`

.. index::
   module: argparse

Pour une gestion avancée des arguments et/ou options de la ligne de
commande, il est préférable d'utiliser le module :mod:`argparse`.
P.ex.:

.. literalinclude:: circonscrit.py
   :start-after: start-argparse
   :end-before: end-argparse
   :linenos:

Cette solution génère automatiquement une aide en ligne, p.ex.::

  $ python circonscrit.py -h
  usage: circonscrit.py [-p/--plot] [-i/--input coordfile | x1,y1 x2,y2 x3,y3]

  Compute the circumscribed circle to 3 points in the plan.

  positional arguments:
    x,y                   Coordinates 'x,y' of point

  optional arguments:
    -h, --help            show this help message and exit
    -i [INPUT], --input [INPUT]
                          Coordinate file (one 'x,y' per line)
    -p, --plot            Draw the circumscribed circle
    --version             show program's version number and exit


.. _pickle:

[c]Pickle: sérialisation des données
====================================

.. index::
   module: pickle/cPickle

Les modules :mod:`pickle`/:mod:`cPickle` permettent la sauvegarde
pérenne d'objets python (« sérialisation »).

>>> d = dict(a=1, b=2, c=3)
>>> l = range(10000)
>>> import cPickle as pickle         # 'cPickle' est + rapide que 'pickle'
>>> pkl = open('archive.pkl', 'w')   # Overture du fichier en écriture
>>> pickle.dump((d, l), pkl, protocol=-1)  # Sérialisation du tuple (d, l)
>>> pkl.close()                      # *IMPORTANT!* Fermeture du fichier
>>> d2, l2 = pickle.load(open('archive.pkl')) # Désérialisation (relecture)
>>> (d == d2) and (l == l2)
True

.. Attention:: les `pickles` ne sont pas un format d'échange de
   données. Ils sont spécifiques à python, et peuvent dépendre de la
   machine utilisée.


*Batteries included*
====================

.. .. index::
..    module: math

Quelques modules de la librairie standard qui peuvent être d'intérêt:

* :mod:`math`: accès aux fonctions mathématiques (réelles)

  >>> math.asin(math.sqrt(2)/2)/math.pi*180
  45.00000000000001

.. .. index::
..    module: sys
..    module: os
..    module: shutil
..    module: subprocess
..    module: glob

* Interactions avec le système:

  - :mod:`sys`, :mod:`os`: interface système
  - :mod:`shutil`: opérations sur les fichiers (*copy*, *move*, etc.)
  - :mod:`subprocess`: éxécution de commandes système
  - :mod:`glob`: méta-caractères du *shell* (p.ex. `toto?.*`)

.. .. index::
..    module: re

* `Expressions régulières <https://docs.python.org/2/howto/regex.html>`_:
  :mod:`re`

.. .. index::
..    module: time
..    module: datetime

* Gestion du temps (:mod:`time`) et des dates (:mod:`datetime`,
  :mod:`calendar`)

.. .. index::
..    module: gzip
..    module: bzip2
..    module: zipfile
..    module: tarfile

* Fichiers compressés et archives: :mod:`gzip`, :mod:`bz2`,
  :mod:`zipfile`, :mod:`tarfile`

.. .. index::
..    module: cvs
..    module: pickle/cPickle
..    module: ConfigParser

* Lecture & sauvegarde des données (outre :mod:`pickle`/:mod:`cPickle`)

  - :mod:`csv`: lecture/sauvegarde de fichiers :abbr:`CSV (Comma
    Separated Values)`
  - :mod:`ConfigParser`: fichiers de configuration

.. - :mod:`json`: lightweight data interchange format
.. - yaml: http://pyyaml.org/

.. .. index::
..    module: urllib2

* `Lecture d'une URL <https://docs.python.org/2/howto/urllib2.html>`_
  (p.ex. page web): :mod:`urllib2`


*Text/Graphical User Interfaces*
================================

- :abbr:`TUI (Text User Interface)`: :mod:`curses`
- :abbr:`GUI (Graphical User Interface)`: :mod:`Tkinter`,
- Librairies externes; `PyGTK <http://www.pygtk.org/>`_, `PyQt
  <http://www.riverbankcomputing.co.uk/software/pyqt/intro>`_,
  `wxPython <http://www.wxpython.org/>`_
