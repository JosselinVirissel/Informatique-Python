Développer en python
####################

.. contents:: Table des matières
..
    1  Le zen du python
      1.1  Us et coutumes
      1.2  Principes de conception logicielle
    2  Développement piloté par les tests
    3  Outils de développement
      3.1  *Integrated Development Environment*
      3.2  Vérification du code
      3.3  Documentation
      3.4  Débugage et optimisation
      3.5  *Python packages*
      3.6  Python 2 vs. python 3


.. _td7:

Le zen du python
================

.. index:: Zen du python

Le *zen du Python* (:pep:`20`) est une série de 20 aphorismes [#zen]_
donnant les grands principes du Python::

  >>> import this

1.  Beautiful is better than ugly.
2.  Explicit is better than implicit.
3.  Simple is better than complex.
4.  Complex is better than complicated.
5.  Flat is better than nested.
6.  Sparse is better than dense.
7.  Readability counts.
8.  Special cases aren't special enough to break the rules.
9.  Although practicality beats purity.
10. Errors should never pass silently.
11. Unless explicitly silenced.
12. In the face of ambiguity, refuse the temptation to guess.
13. There should be one-- and preferably only one --obvious way to do it.
14. Although that way may not be obvious at first unless you're Dutch.
15. Now is better than never.
16. Although never is often better than *right* now.
17. If the implementation is hard to explain, it's a bad idea.
18. If the implementation is easy to explain, it may be a good idea.
19. Namespaces are one honking great idea -- let's do more of those!

Une traduction libre en français:

1. Préfèrer le beau au laid,
2. l’explicite à l’implicite,
3. le simple au complexe,
4. le complexe au compliqué,
5. le déroulé à l’imbriqué,
6. l’aéré au compact.
7. La lisibilité compte.
8. Les cas particuliers ne le sont jamais assez pour violer les règles,
9. même s'il faut privilégier l’aspect pratique à la pureté.
10. Ne jamais passer les erreurs sous silence,
11. ou les faire taire explicitement.
12. Face à l’ambiguïté, ne pas se laisser tenter à deviner.
13. Il doit y avoir une -- et si possible une seule -- façon évidente de
    procéder,
14. même si cette façon n’est pas évidente à première vue, à moins
    d’être Hollandais.
15. Mieux vaut maintenant que jamais,
16. même si jamais est souvent mieux qu’immédiatement.
17. Si l’implémentation s’explique difficilement, c’est une mauvaise
    idée.
18. Si l’implémentation s’explique facilement, c’est peut-être une bonne
    idée.
19. Les espaces de nommage sont une sacrée bonne idée, utilisons-les
    plus souvent !

Us et coutumes
--------------

- *Easier to Ask for Forgiveness than Permission* (`try ... except`)
- *Fail early, fail often, fail better!* (`raise`)
- le *Style Guide for Python Code* (:pep:`8`)
- `Idioms and Anti-Idioms in Python
  <https://docs.python.org/2/howto/doanddont.html>`_
- `Code Like a Pythonista: Idiomatic Python
  <http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html>`_
- `Google Python Style Guide
  <https://google.github.io/styleguide/pyguide.html>`_
- `The Best of the Best Practices (BOBP) Guide for Python
  <https://gist.github.com/sloria/7001839>`_

.. rubric:: Quelques conseils supplémentaires:

- « Ne réinventez pas la roue, sauf si vous souhaitez en savoir plus
  sur les roues » (Jeff Atwood [#wheel]_): cherchez si ce que vous
  voulez faire n'a pas déjà été fait (éventuellement en mieux...),
  construisez dessus (en citant évidemment vos sources), et contribuez
  si possible!
- Codez *proprement*: commentez votre code, utilisez des noms de
  variable qui ont un sens, créez des objets si nécessaire, etc.
- Codez proprement *dès le début*: ne croyez pas que vous ne relirez
  jamais votre code (ou même que personne n'aura jamais à le lire), ou
  que vous aurez le temps de le refaire mieux plus tard...
- « L'optimisation prématurée est la source de tous les maux » (Donald
  Knuth [#opt]_): mieux vaut un code lent mais juste et maintenable
  qu'un code rapide et faux ou incompréhensible. Dans l'ordre absolu
  des priorités:

  1. *Make it work.*
  2. *Make it right.*
  3. *Make it fast.*

- *Respectez* le zen du python, il vous le rendra.

Principes de conception logicielle
----------------------------------

La bonne conception d'un programme va permettre de gérer efficacement la
complexité des algorithmes, de faciliter la maintenance (p.ex. correction des
erreurs) et d'accroître les possibilités d'extension.

**Modularité**
  Le code est structuré en répertoires, fichiers, classes, méthodes et
  fonctions.  Les blocs ne font pas plus de quelques dizaines de lignes, les
  fonctions ne prennent que quelques arguments, la structure logique n'est pas
  trop complexe, etc.

  En particulier, le code doit respecter le *principe de responsabilité
  unique*: chaque entité élémentaire (classe, méthode, fonction) ne doit avoir
  qu'une unique raison d'exister, et ne pas tenter d'effectuer plusieurs tâches
  sans rapport direct (p.ex. lecture d'un fichier de données *et* analyse des
  données).

**Flexibilité**
  Une modification du comportement du code (p.ex. l'ajout d'une nouvelle
  fonctionnalité) ne nécessite de changer le code qu'en un nombre restreint de
  points.

  Un code *rigide* devient rapidement difficile à faire évoluer, puisque chaque
  changement requiert un grand nombre de modifications.

**Robustesse**
  La modification du code en un point ne change pas de façon inopinée le
  comportement dans une autre partie *a priori* non reliée.

  Un code *fragile* est facile à modifier, mais chaque modification peut avoir
  des conséquences inattendues et le code tend à devenir instable.

**Réutilisabilité**
  La réutilisation d'une portion de code ne demande pas de changement majeur,
  n'introduit pas trop de dépendances, et ne conduit pas à une duplication du
  code.

L'application de ces principes de développement dépend évidemment de l'objectif
final du code:

- une bibliothèque *centrale* (utilisée par de nombreux programmes) favorisera
  la robustesse et la réutilisabilité au dépend de la flexibilité: elle devra
  être particulièrement bien pensée, et ne pourra être modifiée qu'avec
  parcimonie;
- inversement, un script d'analyse de haut niveau, d'utilisation restreinte,
  pourra être plus flexible mais plus fragile et peu réutilisable.


.. _TDD:

Développement piloté par les tests
==================================

Le *Test Driven Development* (TDD, ou en français « développement
piloté par les tests ») est une méthode de programmation qui permet
d'éviter des bugs *a priori* plutôt que de les résoudre *a
posteriori*. Ce n'est pas une méthode propre à Python, elle est
utilisée très largement par les programmeurs professionnels.

Le cycle préconisé par TDD comporte cinq étapes :

1. écrire un premier test ;
2. vérifier qu'il échoue (puisque le code qu'il teste n'existe pas
   encore), afin de s'assurer que le test est valide et exécuté ;
3. écrire un code minimal pour passer le test ;
4. vérifier que le test passe correctement ;
5. éventuellement « réusiner » le code (*refactoring*), c'est-à-dire
   l'améliorer (rapidité, lisibilité) tout en gardant les mêmes
   fonctionnalités.

Diviser pour mieux régner: chaque fonction, classe ou méthode est
testée indépendemment.  Ainsi, lorsqu'un nouveau morceau de code ne
passe pas les tests qui y sont associés, il est certain que l'erreur
provient de cette nouvelle partie et non des fonctions ou objets que
ce morceau de code utilise. On distingue ainsi hiérarchiquement:

1. Les tests unitaires vérifient individuellement chacune des
   fonctions, méthodes, etc.
2. Les tests d'intégration évaluent les interactions entre différentes
   unités du programmes.
3. Les tests système assurent le bon fonctionnement du programme dans
   sa globalité.

Il est essentiel de garder tous les tests au cours du développement,
ce qui permet de les réutiliser lorsque l'on veut compléter ou
améliorer une partie du code. Si le nouveau code passe toujours les
anciens test, on est alors sûr de ne pas avoir cassé les
fonctionnalités précédentes.

Nous avons déjà vu aux TD précédents plusieurs façon de rédiger des
tests unitaires:

* Les `doctest <https://docs.python.org/2/library/doctest.html>`_ sont
  des exemples (assez simples) d'exécution de code inclus dans les
  *docstring* des classes ou fonctions:

  .. literalinclude:: mean_power.py
     :pyobject: mean_power
     :emphasize-lines: 12-15
     :linenos:

  Les *doctests* peuvent être exécutés de différentes façons (voir
  ci-dessous):

  - avec le module standard :mod:`doctest`: `python -m doctest -v
    mean_power.py`
  - avec pytest_: `py.test --doctest-modules -v mean_power.py`
  - avec nose_: `nosetests --with-doctest -v mean_power.py`

* Les fonctions dont le nom commence par `test_` et contenant des
  `assert` sont automatiquement détectées par pytest_ [#py.test]_.
  Cette méthode permet d'effectuer des tests plus poussés que les
  *doctests*, éventuellement dans un fichier séparé du code à
  tester. P.ex.:

  .. literalinclude:: ../Exercices/animaux.py
     :start-after: start-tests
     :end-before: end-tests
     :linenos:

  Les tests sont exécutés via :samp:`py.test {programme.py}`.

* Le module :mod:`unittest` de la librairie standard permet à peu près
  la même chose que pytest_, mais avec une syntaxe souvent plus
  lourde. :mod:`unittest` est étendu par le module non-standard nose_.


Outils de développement
=======================

Je fournis ici essentiellement des liens vers des outils pouvant être
utiles pour développer en python.

*Integrated Development Environment*
------------------------------------

- `idle <https://docs.python.org/2/library/idle.html>`_, l'IDE intégré à Python
- :program:`emacs` + `python-mode` pour l'édition, et
  :program:`ipython` pour l'execution de code (voir `Python
  Programming In Emacs
  <https://www.emacswiki.org/emacs/PythonProgrammingInEmacs>`_)
- `spyder <https://github.com/spyder-ide/spyder>`_
- `PythonToolkit <http://pythontoolkit.sourceforge.net/>`_
- `pyCharm <https://www.jetbrains.com/pycharm/>`_ (la version `community` est
  gratuite)
- `Etc.
  <https://en.wikipedia.org/wiki/List_of_integrated_development_environments_for_Python#Python>`_

Vérification du code
--------------------

Il s'agit d'outils permettant de vérifier *a priori* la validité
syntaxique du code, de mettre en évidence des constructions
dangereuses, les variables non-définies, etc.  Ces outils ne testent
pas nécessairement la validité des algorithmes et de leur mise en
oeuvre...

- `pyflakes <https://pypi.python.org/pypi/pyflakes>`_
- `pychecker <http://pychecker.sourceforge.net/>`_
- `pylint <https://pypi.python.org/pypi/pylint>`_
- `pycodestyle <https://github.com/PyCQA/pycodestyle/>`_ (ex-`pep8`) et
  `autopep8 <https://github.com/hhatto/autopep8>`_

Documentation
-------------

.. https://wiki.python.org/moin/DocumentationTools

* Outils de documentation, ou comment transformer automagiquement un
  code-source bien documenté en une documentation fonctionnelle.

  - `Sphinx <http://www.sphinx-doc.org/en/stable/>`_
  - `reStructuredText for Sphinx
    <http://www.sphinx-doc.org/en/stable/rest.html>`_
  - `Awesome Sphinx <https://github.com/yoloseem/awesome-sphinxdoc>`_
  - `apidoc <http://www.sphinx-doc.org/en/stable/man/sphinx-apidoc.html>`_
    (documentation automatique)
    
* Conventions de documentation:

  - *Docstring convention*: :pep:`257`
  - `Documenting Your Project Using Sphinx
    <http://pythonhosted.org/an_example_pypi_project/sphinx.html>`_
  - `A Guide to NumPy/SciPy Documentation
    <https://github.com/numpy/numpy/blob/master/doc/HOWTO_DOCUMENT.rst.txt>`_
  - `Sample doc <http://matplotlib.org/sampledoc/>`_ (matplotlib)


Débugage et optimisation
------------------------

.. rubric:: Débogage

Les débogueurs permettent de « plonger » dans un code au cours
d'exécution ou juste après une erreur (analyse post-mortem).

- Modules de la bibliothèque standard: :mod:`pdb`, :mod:`timeit`

  Ainsi, pour déboguer un script, il est possible de l'exécuter sous
  le contrôle du débogueur `pdb
  <https://docs.python.org/2/library/pdb.html>`_ en s'interrompant dès la
  1ère instruction::

    python -m pdb script.py
    (Pdb)

- Commandes :program:`ipython`: `%run`, `%debug`, `%timeit`

  Si un script exécuté sous `ipython` (commande `%run`) lève une
  exception, il est possible d'inspecter l'état de la mémoire au
  moment de l'erreur avec la commande `%debug`.

.. rubric:: Profilage et optimisation

.. Warning:: *Premature optimization is the root of all evil* --
   Donald Knuth

Le profilage permet de déterminer le temps passé dans chacune des
sous-fonctions d'un code, afin d'y identifier les parties à optimiser.

- `python -O`, `__debug__`, `assert`
- `Performance tips
  <https://wiki.python.org/moin/PythonSpeed/PerformanceTips>`_
- `Tutoriel de profilage
  <http://scikit-learn.sourceforge.net/dev/developers/performance.html#profiling-python-code>`_
- `cython <http://cython.org/>`_: *write C-extensions in python-like
  language* (`Working with Numpy
  <http://docs.cython.org/en/latest/src/tutorial/numpy.html>`_)

.. - `Guppy <http://guppy-pe.sourceforge.net/>`_: *object and heap memory
..   sizing, profiling and analysis*

*Python packages*
-----------------

Comment installer/créer des modules externes:

- `pip <https://pip.pypa.io/en/latest/>`_
- `Hitchhiker’s Guide to Packaging
  <http://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/>`_
- `Packaging a python library
  <https://blog.ionelmc.ro/2014/05/25/python-packaging/>`_

.. _python23:

Python 2 vs. python 3
---------------------

- `Python 2 or python 3?
  <https://wiki.python.org/moin/Python2orPython3>`_
- `Porting Python 2 Code to Python 3
  <http://python.readthedocs.io/en/latest/howto/pyporting.html>`_
- `Python 2/3 compatibility <http://python-future.org/>`_
- `2to3 <https://docs.python.org/3/library/2to3.html>`_

.. Gestion de versions
.. -------------------

.. - `git <http://git-scm.com/>`_
.. - `git@py4science <http://fperez.org/py4science/git.html>`_


.. rubric:: Notes de bas de page

.. [#zen] Dont seulement 19 ont été écrits.
.. [#py.test] pytest_ ne fait pas partie de la librairie standard.  Il
   vous faudra donc l'installer indépendemment si vous voulez
   l'utiliser.
.. [#wheel] « *Don't reinvent the wheel, unless you plan on learning
   more about wheels* » -- Jeff Atwood
.. [#opt] « *Premature optimization is the root of all evil* » --
   Donald Knuth

.. _pytest: https://docs.pytest.org/en/latest/
.. _nose:   http://nose.readthedocs.io/en/latest/
